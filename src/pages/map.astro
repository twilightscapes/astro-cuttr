---

import { Image } from "astro:assets";
import PageLayout from "@/layouts/Base.astro";
const meta = {
	description: "I'm a starter theme for Astro.build",
	title: "About",
};
---
<body class="install" style="padding:0 !important; margin:0 !important;">
    <PageLayout meta={meta}>


    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet-draw/dist/leaflet.draw.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css">
    <style scoped>
    body {
        padding: 0 !important;
        margin: 0 !important;
        overflow: hidden;
        max-width: 100vw;
        max-height: 100vh;
    }
/* 
    .topmenu {visibility:hidden !important;} */



    #map {
        height: 100vh;
        z-index: 0;
        /* margin-top: 60px; */
    }

    #area {
        position: fixed;
        padding: 5px;
        bottom: 15vh;
        left: 0;
        right: 0;
        z-index: 9999;
        width: 100%;
        max-width: 400px;
        margin: 0 auto;
        text-align: center;
        background: rgba(0, 0, 0, 0.7);
        color: #fff;
        font-size: clamp(1.6rem, 2.5vw, 3rem);
        border-radius: 10px;
    }

    .leaflet-draw-toolbar {
        background-color: white;
        padding: 10px;
        border-radius: 5px;
        z-index: 1000;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }

    .leaflet-draw-actions a {
        display: block;
        margin-bottom: 5px;
        text-align: center;
        background-color: #3388ff;
        color: white;
        padding: 8px 10px;
        text-decoration: none;
        border-radius: 3px;
        cursor: pointer;
    }

    .leaflet-draw-actions a:hover {
        background-color: #1e6ee6;
    }

    .leaflet-draw-actions a.disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }

    .leaflet-draw-actions a.disabled:hover {
        background-color: #cccccc;
    }

    .leaflet-control-geocoder-form {
        cursor: pointer;
        align-items: center;
    }

    .leaflet-control-geocoder .leaflet-control-geocoder-icon {
        text-align: center;
        padding: 24px;
        text-decoration: none;
        border-radius: 3px;
        cursor: pointer;
    }

    .logo {
        display: flex;
        justify-content: center;
        width: 100%;
        margin: 0 auto;
    }

    .logo img {
        opacity: .7;
        position: relative;
        bottom: inherit;
        z-index: 9999;
        width: 100%;
        max-width: 20vw;
        margin: 0 auto;
    }

    .leaflet-draw-draw-polygon {
        background: transparent !important;
        background-image: url('https://cuttr.app/assets/Cuttr-icon.png') !important;
        background-size: contain !important;
    }

    .leaflet-draw-toolbar {
        background-color: white;
        top:0;
        margin-top: 160px !important; /* Adjusted from 60px to move down by 100px */
        padding: 10px;
        border-radius: 5px;
        z-index: 1000;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }

    .custom-quote-notice {
        position: fixed;
        bottom: 10px;
        left: 10px;
        background-color: white;
        padding: 10px;
        z-index: 10000;
        box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);
    }

    input {
        font-size: 16px !important;
        background: rgba(0, 0, 0, 0.9);
        padding: 1vh 1vw;
    }


</style>


    <div id="map"></div>
    <div id="area">Total Area: 0 sq ft<br>Cost per sq ft: $0.00<br>Cost: $0.00</div>
    <div style="display:flex; justify-content: center; align-items: center; position:relative; ">
        <input type="text" id="address" placeholder="Enter an address" style="color:#222;">
        <img class="logo" src="https://cuttr.app/assets/Cuttr-logo-wht.svg" />
        <form name="map-form" method="POST" data-netlify="true" style="position: fixed; bottom: 0; left:0; right: 0; text-align: center;
        background: rgba(0,0,0,0.7);
        color:#fff;
        font-size: clamp(1.6rem,2.5vw,3rem);
        padding: 10px; z-index: 10000;">
            <input type="hidden" name="form-name" value="map-form">
            <input type="text" id="name" name="name" placeholder="Name" style="color:#fff; border-radius:3px; border:none;" required>
            <input type="email" id="email" name="email" placeholder="Email" style="color:#fff; border-radius:3px; border:none;" required>
            <input type="hidden" id="query" name="query">
            <input type="hidden" id="cost" name="cost">
            <button type="submit">Submit</button>
        </form>
    </div>
</PageLayout>
</body>



<script src="https://unpkg.com/leaflet/dist/leaflet.js" defer></script>
<script src="https://unpkg.com/leaflet-draw/dist/leaflet.draw.js" defer></script>
<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js" defer></script>
<script src="https://unpkg.com/@turf/turf/turf.min.js" defer></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var map = L.map('map', { zoomControl: false }).setView([30.38, -89.03], 10);

        L.tileLayer('https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGFzZXJsYXduIiwiYSI6ImNseTc2czRlbzAxaXMyanB4a3JqNGg0c2QifQ.XllLo86E6MxKyH8ycZJKHQ', {
            maxZoom: 21,
            tileSize: 512,
            zoomOffset: -1,
        }).addTo(map);

        var drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        var drawControl = new L.Control.Draw({
    draw: {
        polyline: false,
        polygon: true,
        rectangle: false,
        circle: false,
        marker: false,
        circlemarker: false
    },
    edit: { featureGroup: drawnItems }
});

        map.addControl(drawControl);

        document.addEventListener('DOMContentLoaded', function() {
            var polygonButton = document.querySelector('.leaflet-draw-draw-polygon');
            if (polygonButton) {
                polygonButton.title = "Draw your yard boundary";
            }
        });

        map.on(L.Draw.Event.CREATED, function (event) {
            var layer = event.layer;
            drawnItems.addLayer(layer);
            updateQueryString();
            calculateArea();
        });

        map.on(L.Draw.Event.EDITED, function (event) {
            updateQueryString();
            calculateArea();
        });

        map.on(L.Draw.Event.DELETED, function (event) {
            updateQueryString();
            calculateArea();
        });

        map.on('moveend', function(event) {
            updateQueryString();
        });

        function updateQueryString() {
            var bounds = drawnItems.toGeoJSON();
            var encodedBounds = encodeURIComponent(JSON.stringify(bounds));
            var center = map.getCenter();
            var zoomLevel = map.getZoom();
            var address = document.getElementById('address').value.trim();
            var params = new URLSearchParams(window.location.search);
            
            params.set('bounds', encodedBounds);
            params.set('zoom', zoomLevel);
            params.set('lat', center.lat.toFixed(5));
            params.set('lng', center.lng.toFixed(5));
            if (address) {
                params.set('address', encodeURIComponent(address));
            } else {
                params.delete('address'); 
            }
            
            var newUrl = window.location.pathname + '?' + params.toString();
            window.history.replaceState({ path: newUrl }, '', newUrl);

            document.getElementById('query').value = window.location.href;
        }

        function calculateArea() {
    var totalArea = 0;
    drawnItems.eachLayer(function(layer) {
        var geojson = layer.toGeoJSON();
        var area = 0;

        // Check if geojson and geojson.geometry are defined
        if (geojson && geojson.geometry) {
            if (geojson.geometry.type === 'Polygon') {
                area = turf.area(geojson);
            } else if (geojson.geometry.type === 'LineString') {
                var polygon = turf.lineToPolygon(geojson);
                area = turf.area(polygon);
            }
        }

        totalArea += area;
    });

    var totalAreaSqFt = totalArea * 10.764;
    var totalCost = totalAreaSqFt * 0.007;

    document.getElementById('area').innerHTML = `Total Area: ${totalAreaSqFt.toFixed(2)} sq ft<br>Cost per sq ft: $0.007<br>Cost: $${totalCost.toFixed(2)}`;
    document.getElementById('cost').value = totalCost.toFixed(2);
}


        var geocoder = L.Control.geocoder({
            defaultMarkGeocode: false
        }).on('markgeocode', function(e) {
            var bbox = e.geocode.bbox;
            var poly = L.polygon([
                bbox.getSouthEast(),
                bbox.getNorthEast(),
                bbox.getNorthWest(),
                bbox.getSouthWest()
            ]).addTo(map);
            map.fitBounds(poly.getBounds());
            poly.remove();
            document.getElementById('address').value = e.geocode.name;
            updateQueryString();
        }).addTo(map);

        var searchButton = document.querySelector('.leaflet-control-geocoder-icon');
if (searchButton) {
    searchButton.style.padding = '20px';
    searchButton.style.display = 'flex';
    searchButton.style.flexDirection = 'row';
    searchButton.style.alignItems = 'center'; 
}

        var input = document.getElementById('address');
        input.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                var searchText = input.value;
                geocoder.options.geocoder.geocode(searchText, function(results) {
                    if (results && results.length > 0) {
                        var result = results[0];
                        var bbox = result.bbox;
                        var poly = L.polygon([
                            bbox.getSouthEast(),
                            bbox.getNorthEast(),
                            bbox.getNorthWest(),
                            bbox.getSouthWest()
                        ]).addTo(map);
                        map.fitBounds(poly.getBounds());
                        poly.remove();
                        input.value = result.name;
                        updateQueryString();
                    }
                });
            }
        });

        function setMapFromQueryString() {
            var params = new URLSearchParams(window.location.search);
            var zoom = params.get('zoom');
            var lat = params.get('lat');
            var lng = params.get('lng');
            var bounds = params.get('bounds');
            var address = params.get('address');

            if (zoom && lat && lng) {
                map.setView([parseFloat(lat), parseFloat(lng)], parseInt(zoom));
            }

            if (bounds) {
                var decodedBounds = JSON.parse(decodeURIComponent(bounds));
                var geoJsonLayer = L.geoJson(decodedBounds);
                drawnItems.addLayer(geoJsonLayer);
            }

            if (address) {
                document.getElementById('address').value = decodeURIComponent(address);
            }

            calculateArea();
        }

        setMapFromQueryString();
    });
</script>
