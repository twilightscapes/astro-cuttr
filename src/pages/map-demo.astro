---

import { Image } from "astro:assets";
import PageLayout from "@/layouts/Base.astro";
import { GiButtonFinger } from "react-icons/gi";
const meta = {
	description: "I'm a starter theme for Astro.build",
	title: "About",
};
---
<body class="map install spud2" style="padding:0 !important; margin:0 !important;">
    <PageLayout meta={meta}>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet-draw/dist/leaflet.draw.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css">
    <style>
    body {
        padding: 0 !important;
        margin: 0 !important;
        overflow: hidden;
        max-width: 100vw;
        max-height: 100vh;
    }
    
    #map {
        height: calc(100vh);
        z-index: 0;
    }

    #area {
        display:none;
        position: fixed;
        padding: 5px;
        bottom: 15vh;
        left: 0;
        right: 0;
        z-index: 9999;
        width: 100%;
        max-width: 400px;
        margin: 0 auto;
        text-align: center;
        background: rgba(0, 0, 0, 0.7);
        color: #fff;
        font-size: clamp(1.6rem, 2.5vw, 3rem);
        border-radius: 10px;
    }

    .leaflet-draw-toolbar {
        background-color: white;
        padding: 10px;
        border-radius: 5px;
        z-index: 1000;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        top: 10vh !important; /* Move down by 10vh */
        position: absolute; /* Ensure it stays in the correct position */
    }

    .leaflet-draw-actions a {
        display: block;
        margin-bottom: 5px;
        text-align: center;
        background-color: #3388ff;
        color: white;
        padding: 8px 10px;
        text-decoration: none;
        border-radius: 3px;
        cursor: pointer;
    }

    .leaflet-draw-actions a:hover {
        background-color: #1e6ee6;
    }

    .leaflet-draw-actions a.disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }

    .leaflet-draw-actions a.disabled:hover {
        background-color: #cccccc;
    }

    .leaflet-control-geocoder-form {
        cursor: pointer;
        align-items: center;
    }

    .leaflet-control-geocoder .leaflet-control-geocoder-icon {
        text-align: center;
        padding: 24px;
        text-decoration: none;
        border-radius: 3px;
        cursor: pointer;
    }

    .logo {
        display: flex;
        justify-content: center;
        width: 100%;
        margin: 0 auto;
    }

    .logo img {
        opacity: .7;
        position: relative;
        bottom: inherit;
        z-index: 9999;
        width: 100%;
        max-width: 20vw;
        margin: 0 auto;
    }

    .leaflet-draw-draw-polygon {
        background: transparent !important;
        background-image: url('https://cuttr.app/assets/Cuttr-icon.png') !important;
        background-size: contain !important;
    }

    .custom-quote-notice {
        position: fixed;
        bottom: 10px;
        left: 10px;
        background-color: white;
        padding: 10px;
        z-index: 10000;
        box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);
    }

    input {
        font-size: 16px !important;
        background: rgba(0, 0, 0, 0.9);
        padding: 1vh 1vw;
    }
</style>

<div id="map" class="spud"></div>



<a href="https://unpkg.com/leaflet-control='/contact' class="print"  style={{display:'flex', placeContent:'center', width:'100vw', justifyContent:'center', opacity:'', zIndex:'999',}}>
    <div class="button glow font" style={{filter:'drop-shadow(2px 2px 3px #000)', position: 'absolute', bottom: '14vh', left:'', right: '', background: '', padding: '1vh 2vw', display:'flex', alignItems:'center', borderRadius: '10px', opacity: '.99', zIndex: '10', color:'#fff', fontSize: 'clamp(1.1rem,2.5vw,3.2rem)', fontWeight:'900', width:'',animationDuration:'1sec', animation:'', animationDelay:'3sec', gap:'2vw'  }}>
    <GiButtonFinger style={{fontSize:'64px', marginRight:'4px', filter:'dropShadow(2px 2px 3px #000)', filter:'drop-shadow(2px 2px 3px #000)', color:'yellow' }} /> Cut My Grass<br /> From Space
    </div>
</a>


<div id="area">Total Area: 0 sq ft<br>Cost per sq ft: $0.00<br>Cost: $0.00</div>






<!-- <div style="display:flex; justify-content: center; align-items: center; position:relative; ">
    <input type="text" id="address" placeholder="Enter an address" style="color:#222;">
    <form name="map-form" method="POST" data-netlify="true" style="position: fixed; bottom: 0; left:0; right: 0; text-align: center; background: rgba(0,0,0,0.7); color:#fff; font-size: clamp(1.6rem,2.5vw,3rem); padding: 10px; z-index: 10000;">
        <input type="hidden" name="form-name" value="map-form">
        <input type="text" id="name" name="name" placeholder="Name" style="color:#fff; border-radius:3px; border:none;" required>
        <input type="email" id="email" name="email" placeholder="Email" style="color:#fff; border-radius:3px; border:none;" required>
        <input type="hidden" id="query" name="query">
        <input type="hidden" id="cost" name="cost">
        <button type="submit">Submit</button>
    </form>
</div> -->
</PageLayout>
</body>

<script src="https://unpkg.com/leaflet/dist/leaflet.js" defer></script>
<script src="https://unpkg.com/leaflet-draw/dist/leaflet.draw.js" defer></script>
<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js" defer></script>
<script src="https://unpkg.com/@turf/turf/turf.min.js" defer></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var map = L.map('map', { zoomControl: false }).setView([30.38, -89.03], 10);

        L.tileLayer('https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGFzZXJsYXduIiwiYSI6ImNseTc2czRlbzAxaXMyanB4a3JqNGg0c2QifQ.XllLo86E6MxKyH8ycZJKHQ', {
            maxZoom: 21,
            tileSize: 512,
            zoomOffset: -1,
        }).addTo(map);

        var drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        var drawControl = new L.Control.Draw({
            draw: {
                polyline: false,
                polygon: true,
                rectangle: false,
                circle: false,
                marker: false,
                circlemarker: false
            },
            edit: { featureGroup: drawnItems }
        });

        map.addControl(drawControl);

        document.addEventListener('DOMContentLoaded', function() {
            var polygonButton = document.querySelector('.leaflet-draw-draw-polygon');
            if (polygonButton) {
                polygonButton.title = "Draw your yard boundary";
            }
        });

        map.on(L.Draw.Event.CREATED, function (event) {
            var layer = event.layer;
            drawnItems.addLayer(layer);
            updateQueryString();
            calculateArea();
        });

        map.on(L.Draw.Event.EDITED, function (event) {
            updateQueryString();
            calculateArea();
        });

        map.on(L.Draw.Event.DELETED, function (event) {
            updateQueryString();
            calculateArea();
        });

        map.on('moveend', function(event) {
            updateQueryString();
        });

        function updateQueryString() {
            var bounds = drawnItems.toGeoJSON();
            var encodedBounds = encodeURIComponent(JSON.stringify(bounds));
            var center = map.getCenter();
            var zoomLevel = map.getZoom();
            var address = document.getElementById('address').value.trim();
            var params = new URLSearchParams(window.location.search);
            
            params.set('bounds', encodedBounds);
            params.set('zoom', zoomLevel);
            params.set('lat', center.lat.toFixed(5));
            params.set('lng', center.lng.toFixed(5));
            if (address) {
                params.set('address', encodeURIComponent(address));
            } else {
                params.delete('address'); 
            }
            
            var newUrl = window.location.pathname + '?' + params.toString();
            window.history.replaceState({ path: newUrl }, '', newUrl);

            document.getElementById('query').value = window.location.href;
        }

        function calculateArea() {
            var totalArea = 0;
            drawnItems.eachLayer(function(layer) {
                var geojson = layer.toGeoJSON();
                var area = 0;

                // Check if geojson.geometry.type is 'Polygon'
                if (geojson.geometry.type === 'Polygon') {
                    area = turf.area(geojson);
                }
                // Update the total area
                totalArea += area;
            });

            var areaText = document.getElementById('area');
            var costPerSqFt = 0.01;
            var totalCost = totalArea * costPerSqFt;
            areaText.innerHTML = `Total Area: ${totalArea.toFixed(2)} sq ft<br>Cost per sq ft: $${costPerSqFt.toFixed(2)}<br>Cost: $${totalCost.toFixed(2)}`;
            document.getElementById('cost').value = totalCost.toFixed(2);
        }

        document.querySelector('form[name="map-form"]').addEventListener('submit', function(event) {
            document.getElementById('query').value = window.location.href;
        });

        if (window.location.search) {
            var params = new URLSearchParams(window.location.search);
            var lat = params.get('lat');
            var lng = params.get('lng');
            var zoom = params.get('zoom');
            var bounds = params.get('bounds');
            var address = params.get('address');

            if (lat && lng && zoom) {
                map.setView([lat, lng], parseInt(zoom));
            }

            if (bounds) {
                var decodedBounds = decodeURIComponent(bounds);
                var parsedBounds = JSON.parse(decodedBounds);
                L.geoJSON(parsedBounds).eachLayer(function(layer) {
                    drawnItems.addLayer(layer);
                });
                calculateArea();
            }

            if (address) {
                document.getElementById('address').value = decodeURIComponent(address);
            }
        }

        var geocoder = L.Control.Geocoder.nominatim();
        var control = L.Control.geocoder({
            geocoder: geocoder,
            placeholder: "Enter an address",
            collapsed: false,
            position: "topright" // Change position of search bar
        }).addTo(map);

        control.markGeocode = function(result) {
            var bbox = result.bbox;
            var poly = L.polygon([
                [bbox.getSouthEast().lat, bbox.getSouthEast().lng],
                [bbox.getNorthEast().lat, bbox.getNorthEast().lng],
                [bbox.getNorthWest().lat, bbox.getNorthWest().lng],
                [bbox.getSouthWest().lat, bbox.getSouthWest().lng]
            ]).addTo(map);
            map.fitBounds(poly.getBounds());
            document.getElementById('address').value = result.name;
            updateQueryString();
        };

        var addressInput = document.getElementById('address');
        addressInput.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                geocoder.geocode(addressInput.value.trim(), function(results) {
                    if (results && results.length > 0) {
                        control.markGeocode(results[0]);
                    }
                });
            }
        });

        // Recalculate area and cost when the map is moved
        map.on('moveend', function(event) {
            calculateArea();
        });
    });
</script>

